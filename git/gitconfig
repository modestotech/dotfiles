[user]
	name = modestotech
	email = modestotechnology@gmail.com

[include]
	path = ~/.gitconfig.local

[color]
	ui = true

[merge]
	conflictStyle = diff3

[push]
	default = simple

[pull]
	ff = only

[rebase]
	updateRefs = true
	autosquash = true

[core]
	autocrlf = input
	eol = lf
	commentChar = "@"

[fetch]
	prune = true

[alias]
	aa = add .
	ca = commit --amend
	can = commit --amend --no-edit
	co = checkout

    # Checkout 'dev' if it exists, otherwise 'develop'
    cod = "!sh -c 'base_branch=$(git branch --list dev develop --format=\"%(refname:short)\" | grep -E \"^dev$|^develop$\" | head -n 1); if [ -z \"$base_branch\" ]; then echo \"No dev or develop branch found!\" >&2; exit 1; fi; git checkout \"$base_branch\"'"

    # List all local and remote branches fully merged into the current branch
    # Useful for spotting branches safe to delete after their changes are merged
    bad = branch -a --merged	d = branch -d

    # Create a fixup commit for the last commit (HEAD) including all tracked changes
    # Use with 'git rebase -i --autosquash' (or autosquash=true) to fold it into the target commit
    caf = commit -a --fixup

    # Fetch origin 'dev' or 'develop' branch (prefers dev if both exist)
    fodd = "!sh -c 'base_branch=$(git branch --list dev develop --format=\"%(refname:short)\" | grep -E \"^dev$|^develop$\" | head -n 1); if [ -z \"$base_branch\" ]; then echo \"No dev or develop branch found!\" >&2; exit 1; fi; git fetch origin \"$base_branch\":\"$base_branch\"'"

	pf = push --force-with-lease
	rpo = remote prune origin
	rec = rebase --continue
	s = status

    # Rebase onto dev if it exists, otherwise onto develop (non-interactive)
    red = "!sh -c 'base_branch=$(git branch --list dev develop --format=\"%(refname:short)\" | grep -E \"^dev$|^develop$\" | head -n 1); if [ -z \"$base_branch\" ]; then echo \"No dev or develop branch found!\" >&2; exit 1; fi; git rebase \"$base_branch\"'"

    # Rebase onto dev if it exists, otherwise onto develop (interactive)
    rid = "!sh -c 'base_branch=$(git branch --list dev develop --format=\"%(refname:short)\" | grep -E \"^dev$|^develop$\" | head -n 1); if [ -z \"$base_branch\" ]; then echo \"No dev or develop branch found!\" >&2; exit 1; fi; git rebase -i \"$base_branch\"'"
