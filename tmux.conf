# use C-s, since it's on the home row and easier to hit than C-b
# C-a conflicts with increment number, C-a in VIM, therefore C-s
set-option -g prefix C-s
unbind 'C-b'

# p behaviour is on h (previous window, unbind to use for pasting from system clipboard)
unbind 'p'

# re-bind pane splitting and new window to be started with current path
bind '"' split-window -c '#{pane_current_path}'
bind '%' split-window -h -c '#{pane_current_path}'
bind 'c' new-window -c '#{pane_current_path}'

# Start window numbering at 1
set -g base-index 1
set -g renumber-windows on

# Set the delay for when clicking escape (default 500 ms)
set -s escape-time 100

# Set repeat time for repeating bind commands with -r flag
set -g repeat-time 1000

# Easy config reload
bind 'r' source-file ~/.tmux.conf \; display-message "tmux.conf reloaded."

set-option -g default-terminal screen-256color

# Pane resizing
bind -r 'h' resize-pane -L 5
bind -r 'j' resize-pane -D 5
bind -r 'k' resize-pane -U 5
bind -r 'l' resize-pane -R 5

# Smart pane switching with awareness of vim splits
bind -n 'C-h' run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys 'C-h') || tmux select-pane -L"
bind -n 'C-j' run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys 'C-j') || tmux select-pane -D"
bind -n 'C-k' run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys 'C-k') || tmux select-pane -U"
bind -n 'C-l' run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys 'C-l') || tmux select-pane -R"

# Use prefix + o to toggle between current and last window
bind 'o' switch-client -l
bind 'O' select-window -l

# use vim-like keys for changing windows and sessions
bind -r 'H' previous-window
bind -r 'L' next-window
bind -r 'J' switch-client -p
bind -r 'K' switch-client -n

bind 'b' swap-pane -D
bind 'n' swap-pane -U

set-window-option -g other-pane-height 25
set-window-option -g other-pane-width 80
# Window style, inactive/active
set -g window-style 'fg=colour247,bg=colour236'
set -g window-active-style 'fg=colour250,bg=black'

# Pane border
set-option -g pane-active-border-style fg=colour6,bg=default
set-option -g pane-border-style fg=colour8

# Activate mouse
set -g mouse on

bind -T copy-mode-vi 'WheelUpPane' select-pane \; send-keys -X -N 2 scroll-up
bind -T copy-mode-vi 'WheelDownPane' select-pane \; send-keys -X -N 2 scroll-down

set-window-option -g display-panes-time 1500

# Status Bar
set-option -g status-interval 1
set-option -g status-left ''
set-option -g status-right 'ðŸ•– %H:%M ðŸ“… %d/%m/%y'
set-window-option -g status-left " #S  - "
set-window-option -g window-status-style fg=colour236,bg=colour162
set-window-option -g window-status-current-style fg=colour18,bg=colour248

# Remove the annoying asterisk that denotes current window
set-window-option -g window-status-current-format '[ #I #W ]'
set-window-option -g window-status-format ' #I #W '

# Status Bar solarized-light
set-option -g status-style fg=default,bg=colour248,bg=colour102

# Set window notifications
setw -g monitor-activity on
set -g visual-activity on

# Allow the arrow key to be used immediately after changing windows
set-option -g repeat-time 2

# Use vim keybindings in copy mode
setw -g mode-keys vi

# Copy paste bindings
# Visual selection same for both
bind -T copy-mode-vi 'v' send-keys -X begin-selection
# Copy mode same for both
bind 'Ã¶' copy-mode
# Unbind Enter to conform it to system integrated behaviour
unbind 'Enter'

# Linux copy
if-shell -b 'test $(uname) = "Linux"' 'bind-key -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "xclip -selection clipboard -i"'
if-shell -b 'test $(uname) = "Linux"' 'bind-key -T copy-mode-vi Enter send-key -X copy-pipe-and-cancel "xclip -selection clipboard -i"'
if-shell -b 'test $(uname) = "Darwin"' 'bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe-and-cancel "xclip -selection clipboard -i"'

# Linux paste
if-shell -b 'test $(uname) = "Linux"' 'bind-key p run "xclip -selection clipboard -o | tmux load-buffer - ; tmux paste-buffer"'

# MacOS copy
if-shell -b 'test $(uname) = "Darwin"' 'bind-key -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "reattach-to-user-namespace pbcopy"'
if-shell -b 'test $(uname) = "Darwin"' 'bind-key -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel "reattach-to-user-namespace pbcopy"'
if-shell -b 'test $(uname) = "Darwin"' 'bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe-and-cancel "reattach-to-user-namespace pbcopy"'

# MacOS paste
if-shell -b 'test $(uname) = "Darwin"' 'bind-key p run "pbpaste | tmux load-buffer - ; tmux paste-buffer"'

set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-resurrect' # prefix + Ctrl-s to save session; prefix + Ctrl-r to restore session.
run -b '~/.tmux/plugins/tpm/tpm'
set -g @resurrect-dir '~/dotfiles/resurrect-backup'
